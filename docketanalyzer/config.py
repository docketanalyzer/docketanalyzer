from pathlib import Path

from docketanalyzer import CONFIG_DIR, Config

env = Config(
    path=CONFIG_DIR / "config.json",
    keys=[
        dict(
            name="DA_DATA_DIR",
            key_type="path",
            description="\nChoose directory for data managed by Docket Analyzer\n",
            default=Path.home() / "docketanalyzer",
            group="docketanalyzer",
            alias_names=["DATA_DIR"],
        ),
        dict(
            name="PACER_USERNAME",
            key_type="str",
            description="\nConfigure PACER Credentials\n",
            default=None,
            group="pacer",
        ),
        dict(
            name="PACER_PASSWORD",
            key_type="str",
            default=None,
            mask=True,
            group="pacer",
        ),
        dict(
            name="COURTLISTENER_TOKEN",
            key_type="str",
            description="\nConfigure CourtListener API\n",
            default=None,
            mask=True,
            group="recap",
        ),
        # ML Tools
        dict(
            name="HF_TOKEN",
            key_type="str",
            description="\nConfigure Hugging Face Token\n",
            default=None,
            mask=True,
            group="huggingface",
        ),
        dict(
            name="WANDB_API_KEY",
            key_type="str",
            description="\nConfigure Weights and Biases\n",
            default=None,
            mask=True,
            group="wandb",
        ),
        dict(
            name="ANTHROPIC_API_KEY",
            key_type="str",
            description="\nConfigure Anthropic\n",
            default=None,
            mask=True,
            group="anthropic",
        ),
        dict(
            name="OPENAI_API_KEY",
            key_type="str",
            description="\nConfigure OpenAI\n",
            default=None,
            mask=True,
            group="openai",
        ),
        dict(
            name="GEMINI_API_KEY",
            key_type="str",
            description="\nConfigure Gemini\n",
            default=None,
            mask=True,
            group="gemini",
        ),
        dict(
            name="COHERE_API_KEY",
            key_type="str",
            description="\nConfigure Cohere\n",
            default=None,
            mask=True,
            group="cohere",
        ),
        dict(
            name="GROQ_API_KEY",
            key_type="str",
            description="\nConfigure Groq\n",
            default=None,
            mask=True,
            group="groq",
        ),
        dict(
            name="ELASTIC_HOST",
            key_type="str",
            description="\nConfigure Elastic\n",
            default=None,
            mask=True,
            group="es",
        ),
        dict(
            name="ELASTIC_PORT",
            key_type="int",
            default=9200,
            mask=True,
            group="es",
        ),
        dict(
            name="POSTGRES_HOST",
            key_type="str",
            description="\nConfigure Postgres\n",
            default=None,
            mask=True,
            group="psql",
        ),
        dict(
            name="POSTGRES_PORT",
            key_type="int",
            default=5432,
            mask=True,
            group="psql",
        ),
        dict(
            name="POSTGRES_DB",
            key_type="str",
            default="da",
            mask=True,
            group="psql",
        ),
        dict(
            name="POSTGRES_USER",
            key_type="str",
            default="admin",
            mask=True,
            group="psql",
        ),
        dict(
            name="POSTGRES_PASSWORD",
            key_type="str",
            default=None,
            mask=True,
            group="psql",
        ),
        dict(
            name="REDIS_HOST",
            key_type="str",
            description="\nConfigure Redis\n",
            default=None,
            mask=True,
            group="redis",
        ),
        dict(
            name="REDIS_PORT",
            key_type="int",
            default=6379,
            mask=True,
            group="redis",
        ),
        dict(
            name="AWS_S3_BUCKET_NAME",
            key_type="str",
            description="\nConfigure S3t\n",
            default=None,
            group="s3",
        ),
        dict(
            name="AWS_S3_ENDPOINT_URL",
            key_type="str",
            default=None,
            group="s3",
            mask=True,
        ),
        dict(
            name="AWS_ACCESS_KEY_ID",
            key_type="str",
            default=None,
            group="s3",
            mask=True,
        ),
        dict(
            name="AWS_SECRET_ACCESS_KEY",
            key_type="str",
            default=None,
            group="s3",
            mask=True,
        ),
        dict(
            name="PYPI_TOKEN",
            key_type="str",
            default=None,
            mask=True,
            group="dev",
        ),
    ],
)
